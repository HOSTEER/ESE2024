#include "strategy.h"
#include "string.h"
#include "config.h"
#include "cmsis_os.h"
#include "ydlidar_x4.h"

#define ZONE_MILIEU 2
#define ZONE_DROITE 3
#define ZONE_GAUCHE 1
#define ZONE_HAUTE 1
#define ZONE_BASSE 3

#define ERR_ZONE_404 1

/*	Schéma de répartition des zones du champ vectoriel
 *  		|				|
 * 		1	|		2		|	3
 * ----------------------------------
 * 			|		^y		|
 * 			|	5	| 		|
 * 		4	|		.->x	|	6
 * 			|				|
 * ----------------------------------
 * 		7	|		8		|	9
 * 			|				|
 */


extern int32_t angle;
extern int32_t avg_speed;
static champ_vect_t champ_vect;
extern QueueHandle_t q_printf;

extern h_ydlidar_x4_t lidar;

static uint8_t msg[100];


void init_champ_vect(void){
	champ_vect.vitesse_avance = (VITESSE_CIRCUIT<<8);
	champ_vect.vitesse_correctrice = (VITESSE_CORRECTION<<8);
	champ_vect.pt_lim_haut = (HAUTEUR_CHAMP<<8);
	champ_vect.pt_lim_bas = -1*champ_vect.pt_lim_haut;
	champ_vect.pt_lim_droite = (LARGEUR_CHAMP<<8);
	champ_vect.pt_lim_gauche = -1*champ_vect.pt_lim_droite;

	champ_vect.offset = (CHAMP_VECT_MARGE<<8);
}


int8_t strategy(strat_mode_t * strat_mode, hOdometry_t * hOdometry){
	vector_t dir_vect, ennemy;
	int32_t new_speed, new_angle;
	//int32_t test_angle, test_avg_speed;

	if((*strat_mode & 0xF000) == HUNTER){
		//Le robot est chasseur
		if(((*strat_mode & 0xFF) == NO_OBSTACLE) || ((*strat_mode & 0xFF) == PREVIOUS_OBSTACLE)){
			//Aucun obstacle
			//TODO appel fonction detection obstacle le + proche
			nearest_enemy(&ennemy, hOdometry);
			//angle = modulo_2pi(ennemy.angle);
			//avg_speed = angleForward( ennemy.angle)*DEFAULT_SPEED<<8;
			//TODO màj consigne commande
			new_speed = angleForward( -ennemy.angle)*ennemy.norm;
			new_angle = modulo_2pi(-ennemy.angle);
			lissage(new_angle, new_speed);

			HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 0);
		}
		else{
			//Obstacle détecté
			//printf("Comportement obstacle \n\r");
			HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 1);
			switch(*strat_mode&0xFF){
			case FALL_FORWARD:
				angle = hOdometry->angle;
				avg_speed = + DEFAULT_SPEED<<8;
				break;
			case FALL_BACKWARD:
				angle = hOdometry->angle;
				avg_speed = - DEFAULT_SPEED<<8;
				break;
			case FALL_FORWARD | COLLIDE:
			HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 0);

				*strat_mode = (*strat_mode&0xFFF) | PREY;
				angle = hOdometry->angle;
				avg_speed = + DEFAULT_SPEED<<8;
				vTaskDelay(100);
				break;
			case FALL_BACKWARD | COLLIDE:
			HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 0);
				*strat_mode = (*strat_mode&0xFFF) | PREY;
				angle = hOdometry->angle;
				avg_speed = - DEFAULT_SPEED<<8;
				vTaskDelay(100);
				break;
			default: //COLLIDE sans FALL_x
				HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 0);
				*strat_mode = (*strat_mode&0xFFF) | PREY;
				angle = hOdometry->angle;
				avg_speed = 0;
				vTaskDelay(100);
				break;
			}
		}
	}
	else{
		//Le robot est la proie
		if((*strat_mode & 0xFF) == NO_OBSTACLE || ((*strat_mode & 0xFF) == PREVIOUS_OBSTACLE)){
			HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 0);
			//Aucun obstacle
			//Calcul de suivi de courbe
			//champ_vectoriel(&champ_vect, strat_mode, hOdometry, &dir_vect);

			nearest_enemy(&ennemy, hOdometry);


			dir_vect.x = 0;
			dir_vect.y = 0;
			//TODO somme 2 consignes
			dir_vect.x = dir_vect.x - ennemy.x;
			dir_vect.y = dir_vect.y - ennemy.y;


			//hOdometry->angle = fixed_div(fixed_mul(45<<16,PI,24), 180<<16, 24);
			//Calcul angle entre vecteur de consigne et avant du robot + calcul norme
			CORDIC_vector(&dir_vect);



			//Mise à jour de la consigne de commande
			//Vx = cos(angle_vect_dir - angle_robot)*hypotenuse
			//avg_speed = angleForward( dir_vect.angle)*dir_vect.norm;// fixed_mul(dir_vect.norm, fpcos(dir_vect.angle - hOdometry->angle, 8), 8);
			//angle = modulo_2pi(dir_vect.angle);
			//avg_speed = -angleForward( -ennemy.angle)*ennemy.norm;
			//angle = modulo_2pi(-ennemy.angle);
			new_speed = -angleForward( -ennemy.angle)*ennemy.norm;
			new_angle = modulo_2pi(-ennemy.angle);
			lissage(new_angle, new_speed);
		}
		else{
			//Obstacle détecté
			//printf("Comportement obstacle \n\r");
			HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, 1);
			switch(*strat_mode&0xFF){
			case PREVIOUS_OBSTACLE:
				nearest_enemy(&ennemy, hOdometry);
				dir_vect.x = - ennemy.x;
				dir_vect.y =- ennemy.y;

				CORDIC_vector(&dir_vect);
				//avg_speed = angleForward( dir_vect.angle)*dir_vect.norm;// fixed_mul(dir_vect.norm, fpcos(dir_vect.angle - hOdometry->angle, 8), 8);
				//angle = modulo_2pi(dir_vect.angle);

				//avg_speed = -angleForward( -ennemy.angle)*ennemy.norm;
				//angle = modulo_2pi(-ennemy.angle);

				new_speed = -angleForward( -ennemy.angle)*ennemy.norm;
				new_angle = modulo_2pi(-ennemy.angle);
				lissage(new_angle, new_speed);

				break;
			case FALL_FORWARD:
				angle = hOdometry->angle;
				avg_speed = + DEFAULT_SPEED<<8;
				break;
			case FALL_BACKWARD:
				angle = hOdometry->angle;
				avg_speed = - DEFAULT_SPEED<<8;
				break;
			case FALL_FORWARD | COLLIDE:
			HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 1);
				*strat_mode = (*strat_mode&0xFFF) | HUNTER;
				angle = hOdometry->angle;
				avg_speed = + DEFAULT_SPEED<<8;
				vTaskDelay(COLLISION_TIMEOUT);
				break;
			case FALL_BACKWARD | COLLIDE:
				HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 1);
				*strat_mode = (*strat_mode&0xFFF) | HUNTER;
				angle = hOdometry->angle;
				avg_speed = - DEFAULT_SPEED<<8;
				vTaskDelay(COLLISION_TIMEOUT);
				break;
			default: //COLLIDE sans FALL_x
				HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, 1);
				*strat_mode = (*strat_mode&0xFFF) | HUNTER;
				angle = hOdometry->angle;
				avg_speed = 0;
				vTaskDelay(COLLISION_TIMEOUT);
				break;
			}
		}
	}


	//sprintf(msg,"Direc: x: %d, y: %d, angle : %d, a_brut %d\n\r", dir_vect.x>>8, dir_vect.y>>8, fixed_div_16(fixed_mul_16(angle>>8,360<<16), PI>>8)>>16,angle);
	//xQueueSend(q_printf, (void *)msg, 1);
	//printf("x: %d, y: %d\n\r", dir_vect.x>>16, dir_vect.y>>16);
	return 0;
}

int8_t champ_vectoriel(champ_vect_t * champ_vect, strat_mode_t * strat_mode, hOdometry_t * hOdometry, vector_t * dir_vect){
	uint8_t zone = zone_sorting(champ_vect, hOdometry);
	//printf("La zone du robot est %d\n\r", zone);
	int8_t status;

	if(zone%2 == 0){
		status = zone_lineaire(champ_vect, strat_mode, hOdometry, zone, dir_vect);
	}
	else{
		status = zone_circulaire(champ_vect, strat_mode, hOdometry, zone, dir_vect);
	}

	//sprintf(msg,"Zone : %d\n\r", zone);
	//xQueueSendToFront(q_printf, (void *)msg, 1);
	return status;
}

int8_t zone_sorting(champ_vect_t * champ_vect, hOdometry_t * hOdometry){
	int8_t zone_v; //Zone verticale dans laquelle est le robot
	int8_t zone_h; //Zone horizontale dans laquelle est le robot
	int32_t x_robot, y_robot;

	//Récupération de la position du robot en Q24.8
		if(hOdometry->x <0){
			x_robot = -((-hOdometry->x)>>8);
		}
		else{
			x_robot = hOdometry->x>>8;
		}
		if(hOdometry->y <0){
			y_robot = -((-hOdometry->y)>>8);
		}
		else{
			y_robot = hOdometry->y>>8;
		}

	//Detection de la zone parmi les 9 dans laquelle se trouve le robot
	if (x_robot >= champ_vect->pt_lim_droite){
		zone_h = ZONE_DROITE;
	}
	else if (x_robot < champ_vect->pt_lim_gauche){
		zone_h = ZONE_GAUCHE;
	}
	else{
		zone_h = ZONE_MILIEU;
	}

	if (y_robot >= champ_vect->pt_lim_haut){
		zone_v = ZONE_HAUTE;
	}
	else if (y_robot < champ_vect->pt_lim_bas){
		zone_v = ZONE_BASSE;
	}
	else{
		zone_v = ZONE_MILIEU;
	}

	//Cas de la zone milieu, il faut calculer la position le long des droites
	if((zone_h + 3*(zone_v - 1)) == 5){

		int32_t fAB = fixed_mul(x_robot, fixed_div(champ_vect->pt_lim_bas - champ_vect->pt_lim_haut, champ_vect->pt_lim_droite - champ_vect->pt_lim_gauche,8),8);
		int32_t fCD = fixed_mul(x_robot, fixed_div(champ_vect->pt_lim_haut - champ_vect->pt_lim_bas, champ_vect->pt_lim_droite - champ_vect->pt_lim_gauche,8),8);

		if(y_robot >= fAB){
			if(y_robot >= fCD){
				//Zone haute
				return 2;
			}
			else{
				//Zone droite
				return 6;
			}
		}
		else{
			if(y_robot >= fCD){
				//Zone gauche
				return 4;
			}
			else{
				//Zone basse
				return 8;
			}
		}
	}
	else{
		return zone_h + 3*(zone_v - 1);
	}

}

int8_t zone_lineaire(champ_vect_t * champ_vect, strat_mode_t * strat_mode, hOdometry_t * hOdometry, uint8_t zone, vector_t * dir_vect){
	int32_t sens;
	int32_t x_robot, y_robot;

	if((*strat_mode & 0x0F00)  == TURN_TRIGO){
		sens = +1;
	}
	else{
		sens = -1;
	}

	//Récupération de la position du robot en Q24.8
	if(hOdometry->x <0){
		x_robot = -((-hOdometry->x)>>8);
	}
	else{
		x_robot = hOdometry->x>>8;
	}
	if(hOdometry->y <0){
		y_robot = -((-hOdometry->y)>>8);
	}
	else{
		y_robot = hOdometry->y>>8;
	}

	//Calcul vecteur consigne
	switch(zone){
	case 2: //Zone haute
		//sens = +1;
		dir_vect->y = fixed_mul(((champ_vect->pt_lim_haut + champ_vect->offset) - y_robot), champ_vect->vitesse_correctrice,8);
		dir_vect->x = +sens*champ_vect->vitesse_avance;
		break;
	case 4: //Zone Gauche
		//sens = +1;
		dir_vect->x = fixed_mul(((champ_vect->pt_lim_gauche - champ_vect->offset) - x_robot), champ_vect->vitesse_correctrice,8);
		dir_vect->y = +sens*champ_vect->vitesse_avance;
		break;
	case 6: //Zone droite
		//sens = -1;
		dir_vect->x = fixed_mul(((champ_vect->pt_lim_droite + champ_vect->offset) - x_robot), champ_vect->vitesse_correctrice,8);
		dir_vect->y = -sens*champ_vect->vitesse_avance;
		break;
	case 8: //Zone basse
		//sens = -1;
		dir_vect->y = fixed_mul(((champ_vect->pt_lim_bas - champ_vect->offset) - y_robot), champ_vect->vitesse_correctrice,8);
		dir_vect->x = -sens*champ_vect->vitesse_avance;
		break;
	default:
		return ERR_ZONE_404;
	}
	return 0;
}

int8_t zone_circulaire(champ_vect_t * champ_vect, strat_mode_t * strat_mode, hOdometry_t * hOdometry, uint8_t zone, vector_t * dir_vect){
	//int32_t dir_vect[2] = {0};
	int32_t xb, yb;
	int32_t Dx, Dy;
	int32_t d, norm;

	int32_t sens;

	if((*strat_mode & 0x0F00)  == TURN_TRIGO){
		sens = +1;
	}
	else{
		sens = -1;
	}

	switch(zone){
	case 1:
		xb = champ_vect->pt_lim_gauche;
		yb = champ_vect->pt_lim_haut;
		break;
	case 3:
		xb = champ_vect->pt_lim_droite;
		yb = champ_vect->pt_lim_haut;
		break;
	case 7:
		xb = champ_vect->pt_lim_gauche;
		yb = champ_vect->pt_lim_bas;
		break;
	case 9:
		xb = champ_vect->pt_lim_droite;
		yb = champ_vect->pt_lim_bas;
		break;
	default:
		return ERR_ZONE_404;
	}

	Dx = (hOdometry->x<0)?(-((-hOdometry->x)>>8) - xb):((hOdometry->x>>8) - xb);
	Dy = (hOdometry->y<0)?(-((-hOdometry->y)>>8) - yb):((hOdometry->y>>8) - yb);
	vector_t Dvect = {Dx, Dy};
	CORDIC_vector(&Dvect);
	norm = Dvect.norm;

	d = champ_vect->offset - norm;
	if (((-d)>>8)>1000 && -d > champ_vect->offset){
		d = -((1000)<<8);
		norm = ((1000)<<8);
	}
	//Calcul consigne de direction
	//vect colinéaire = {-Dx/norm, -Dy/norm}
	//vect tangentiel = {Dy/norm, -Dx/norm}
	//consigne = d*vect_colin + sens*vitesse*vect_tang
	int32_t comp_x_corr = fixed_mul(champ_vect->vitesse_correctrice,fixed_mul(d,fixed_div( Dx, norm, 8), 8), 8);
	int32_t comp_y_corr = fixed_mul(champ_vect->vitesse_correctrice,fixed_mul(d,fixed_div( Dy, norm, 8), 8), 8);
	int32_t comp_x_tang = sens*fixed_div(fixed_mul(champ_vect->vitesse_avance, Dy,8), norm,8);
	int32_t comp_y_tang = sens*fixed_div(fixed_mul(-champ_vect->vitesse_avance, Dx,8), norm,8);

	dir_vect->x = comp_x_corr + sens*fixed_div(fixed_mul(champ_vect->vitesse_avance, Dy,8), norm,8);
	dir_vect->y = comp_y_corr + sens*fixed_div(fixed_mul(-champ_vect->vitesse_avance, Dx,8), norm,8);

	return 0;
}


int32_t nearest_enemy(vector_t * enemy, hOdometry_t * hOdometry){
	int32_t speed;
	int32_t target_angle_rad;
	 //TODO suppress if working find_taget
	uint16_t target_angle;
	uint16_t min_v = 4000, last_min=4000;
	for(int i=0;i<360;i++){
		if((lidar.sorted_dist[i] > 0) && (min_v > lidar.sorted_dist[i])){
			min_v=lidar.sorted_dist[i];
		}
		if(min_v <last_min){
			target_angle = i;
			last_min = min_v;
		}
	}
	//find_target(&lidar, &h_target);
	if(min_v < 4000){
		target_angle_rad = (target_angle - 160)*DEG2RAD; //convert angle from deg to rad Q7.24
		//Recuperation de la variable par la strategie
		enemy->angle = target_angle_rad;
		enemy->norm = min_v;
			speed = fixed_mul(DEFAULT_SPEED<<8, 1<<6, 8);
			if(min_v <500){
				speed = fixed_mul(DEFAULT_SPEED<<8, 1<<7, 8);
				if(min_v <400){
					speed = DEFAULT_SPEED<<8;
						if(min_v <200){
							speed = fixed_mul(DEFAULT_SPEED<<8, 1<<8, 8);
						}
				}
			}
		int32_t cos_comp =fpcos(modulo_2pi( target_angle_rad + hOdometry->angle), 8);
		int32_t sin_comp =fpsin(modulo_2pi( target_angle_rad + hOdometry->angle), 8);
		enemy->x = fixed_mul( cos_comp, speed, 8);
		enemy->y = fixed_mul( sin_comp, speed, 8);

		enemy->norm = speed;

		//angle_corr = set_angle_corr(&hOdometry, target_angle_rad + hOdometry.angle);
		if(target_angle < 130){
			//angle_corr = set_angle_corr(&hOdometry, -1*(1<<24));
			HAL_GPIO_TogglePin(USER_LED4_GPIO_Port, USER_LED4_Pin);
		}else if(target_angle > 170){
			//angle_corr = set_angle_corr(&hOdometry, 1<<24);
			HAL_GPIO_TogglePin(USER_LED3_GPIO_Port, USER_LED3_Pin);
		}else{
			//angle_corr = set_angle_corr(&hOdometry, hOdometry.angle);
			HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
		}

	}
	sprintf(msg,"Angle cible : %d\r\n", (int)target_angle);
	xQueueSendToFront(q_printf, (void *)msg, 1);
	return 0;
}


int32_t angleForward(int32_t angle){
	angle = angle%TWO_PI;
	if(angle > PI/2)
	{
		//xQueueSendToFront(q_printf, (void *)"avant haut\n\r", 1);
		return 1;
	}
	else if(angle < -(int32_t)PI/2)
	{
		//xQueueSendToFront(q_printf, (void *)"avant bas\n\r", 1);
		return 1;
	}
	else{
		//xQueueSendToFront(q_printf, (void *)"arriere\n\r", 1);
		return -1;
	}
}

void lissage(int32_t new_angle, int32_t new_speed){
	if( (avg_speed > 0 && new_speed >0)||(avg_speed < 0 && new_speed <0)){
			//Moyennage
			avg_speed = (avg_speed + new_speed)/2;
		}
		else{
			//Changement de coté de déplacement
			avg_speed = new_speed;
		}

		if(((angle - new_angle) < PI/4) && ((angle - new_angle) > -PI/4)){
			angle = (angle + new_angle)/2;
		}
		else{
			angle = new_angle;
		}
}
